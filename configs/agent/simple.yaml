_target_: agent.metta_agent.MettaAgent

policy_selector:
  uri: null
  type: top
  range: 0
  metric: final.score
  generation: null
  
observations:
  obs_key: grid_obs
  normalize_features: true
  auto_normalize: false
  track_last_action: ${env.track_last_action}
  kinship: ${env.game.kinship}
  
clip_multiplier: 3.0

components:
#necessary sources: _obs_, _core_
# define this further
#necessary outputs: _encoded_obs_, _action_param_, _value_

# do we want _target_ agent.metta_agent.MettaLayer to be in the python instead?
  _obs_: 
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: null
    layer_type: Identity

  obs_normalizer:
    _target_: agent.lib.observation_normalizer.ObservationNormalizer
    input_source: _obs_

  # feature_normalizer:
    ###

  channel_selector_0-11:
    _target_: agent.lib.merge_layer.MergeLayer
    sources:
      - source: obs_normalizer
        slice: [0, 12]    # Use channels 0 to 11
        dim: 1            # Channel dimension
    merge_op: concat       # With a single dictionary entry, concat simply returns the sliced part.
    output_size: 12

  channel_selector_12-23:
    _target_: agent.lib.merge_layer.MergeLayer
    sources:
      - source: obs_normalizer
        slice: [12, 24]   # Use channels 12 to 23
        dim: 1
    merge_op: concat
    output_size: 12

  cnn1_channels_0-11:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: channel_selector_0-11
    output_size: 64
    layer_type: Conv2d
    nn_params:
      kernel_size: 5
      stride: 3

  cnn1_channels_12-23:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: channel_selector_12-23
    output_size: 64
    layer_type: Conv2d
    nn_params:
      kernel_size: 5
      stride: 3

  cnn2_channels_0-11:
    _target_: agent.lib.metta_layer.Conv2d
    input_source: cnn1_channels_0-11
    output_size: 64
    nn_params:
      kernel_size: 3
      stride: 1

  cnn2_channels_12-23:
    _target_: agent.lib.metta_layer.Conv2d
    input_source: cnn1_channels_12-23
    output_size: 64
    nn_params:
      kernel_size: 3
      stride: 1

  cnn_merger:
    _target_: agent.lib.merge_layer.MergeLayer
    sources:
      - source: cnn2_channels_0-11
        slice: [0, 64]
        dim: 1
      - source: cnn2_channels_12-23
        slice: [0, 64]
        dim: 1
    merge_op: concat

  obs_flattener:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: cnn_merger
    layer_type: Flatten

  obs_dropout:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_flattener
    layer_type: Dropout
    nn_params:
      p: 0.5

  obs_linear:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_dropout
    output_size: 128
    nn_params:
      bias: false

  _encoded_obs_:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_flattener
    output_size: 128

  _core_:
    _target_: agent.lib.metta_layer.MettaLayer
    rnn_num_layers: 1
    input_source: null
    output_size: 128
    layer_type: Identity

  critic_1:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: core_helper
    output_size: 512
    layer_type: Linear

  critic_2:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: critic_1
    output_size: 128

  critic_3:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: [actor_2, critic_2]
    output_size: 128

  _value_:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: critic_3
    output_size: 1

  actor_1:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: core_helper
    output_size: 512

  actor_2:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: actor_1
    output_size: 512

# # test this but comment out critic_3
#   - name: actor_2
#     input: [actor_1, critic_1]
#     output: 128

  _action_param_:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: actor_2
    output_size: 20


# The following configuration defines the structure of the neural network layers
# used in the MettaAgent. Each layer is represented as a dictionary with the following keys:
# - _target_: The class of the layer to be instantiated.
# - input_source: The source of the input for this layer. It can be a single layer or a list of layers.
# - output_size: The size of the output for this layer.
# - layer_type: The type of the layer (e.g., Linear, Identity, etc.).
#
# The layers are connected in a hierarchical manner, where the output of one layer
# can be used as the input for another layer. This allows for the creation of complex
# neural network architectures.
#
# Example:
#   critic_1:
#     _target_: agent.lib.metta_layer.MettaLayer
#     input_source: core_helper
#     output_size: 512
#     layer_type: Linear
#
# Under layer_params, add arguments for your nn class.
# Use the same name as the argument in the nn class.
# eg for Linear, you can add bias=False
#
# In this example, the critic_1 layer takes its input from the core_helper layer,
# has an output size of 512, and is of type Linear.

# testing below
  cnn_test:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_helper
    output_size: 64
    layer_type: Conv2d
    nn_params:
      kernel_size: 5
      stride: 3

  Linear_test:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_helper
    output_size: 64
    layer_type: Linear
    nn_params:
      bias: false

  dropout_test:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_helper
    layer_type: Dropout
    nn_params:
      dropout_prob: 0.5

  batchnorm_test:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_helper
    layer_type: BatchNorm2d
    nn_params:
      num_features: 64

  identity_test:
    _target_: agent.lib.metta_layer.MettaLayer
    input_source: obs_helper
    layer_type: Identity
