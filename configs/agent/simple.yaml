# see reference_design.yaml for explanation of components
_target_: metta.agent.metta_agent.MettaAgent

observations:
  obs_key: grid_obs

clip_range: 0 # set to 0 to disable clipping
analyze_weights_interval: 300
l2_init_weight_update_interval: 0

components:
  #necessary layers: _core_, _action_embeds_, _action_, _value_
  #necessary input_source: _obs_

  _obs_:
    _target_: metta.agent.lib.obs_shaper.ObsShaper
    sources: null

  obs_normalizer:
    _target_: metta.agent.lib.observation_normalizer.ObservationNormalizer
    sources:
      - name: _obs_

  cnn1:
    _target_: metta.agent.lib.nn_layer_library.Conv2d
    sources:
      - name: obs_normalizer
    nn_params:
      out_channels: 64
      kernel_size: 5
      stride: 3

  cnn2:
    _target_: metta.agent.lib.nn_layer_library.Conv2d
    sources:
      - name: cnn1
    nn_params:
      out_channels: 64
      kernel_size: 3
      stride: 1

  obs_flattener:
    _target_: metta.agent.lib.nn_layer_library.Flatten
    sources:
      - name: cnn2

  fc1:
    _target_: metta.agent.lib.nn_layer_library.Linear
    sources:
      - name: obs_flattener
    nn_params:
      out_features: 128

  encoded_obs:
    _target_: metta.agent.lib.nn_layer_library.Linear
    sources:
      - name: fc1
    nn_params:
      out_features: 128 # This should match d_model of TransformerMemoryCore
    output_size: 128 # Explicitly set for clarity

  _core_:
    _target_: metta.agent.lib.transformer_memory_core.TransformerMemoryCore # Changed from LSTM
    sources:
      - name: encoded_obs
    output_size: 128 # Must match d_model
    # Transformer-specific hyperparameters:
    d_model: 128
    nhead: 4 # Example value
    num_encoder_layers: 3 # Example value
    dim_feedforward: 512 # Example value (often 2x or 4x d_model)
    dropout: 0.1 # Example value
    num_mem_tokens: 4 # Example value

  # core_relu: (Removed, TransformerMemoryCore output is used directly)
  #   _target_: metta.agent.lib.nn_layer_library.ReLU
  #   sources:
  #     - name: _core_

  # critic_1: (Removed, TransformerMemoryCore output is used directly)
  #   _target_: metta.agent.lib.nn_layer_library.Linear
  #   sources:
  #     - name: core_relu
  #   nn_params:
  #     out_features: 1024
  #   nonlinearity: nn.Tanh
  #   effective_rank: true

  _value_:
    _target_: metta.agent.lib.nn_layer_library.Linear
    sources:
      - name: core_value_output # Changed from critic_1
    nn_params:
      out_features: 1
    nonlinearity: null
    output_size: 1 # Explicitly set

  # actor_1: (Removed, TransformerMemoryCore output is used directly)
  #   _target_: metta.agent.lib.nn_layer_library.Linear
  #   sources:
  #     - name: core_relu
  #   nn_params:
  #     out_features: 512

  _action_embeds_:
    _target_: metta.agent.lib.action.ActionEmbedding
    sources: null
    # output_size: 16 # Should match embedding_dim
    nn_params:
      # num_embeddings: 100 # This is often set by agent based on action space
      embedding_dim: 16

  _action_:
    _target_: metta.agent.lib.actor.MettaActorSingleHead
    sources:
      - name: core_action_output # Changed from actor_1
      - name: _action_embeds_
    # output_size: # Number of discrete actions, set by agent
