# see reference_design.yaml for explanation of components
_target_: agent.metta_agent.MettaAgent

policy_selector:
  uri: null
  type: top
  range: 0
  metric: final.score
  generation: null

kickstarting: true
kickstart_policies:
  - policy_path: wandb://run/simple.standard.2.18.24
    value_coef: 1
    action_coef: 1

  - policy_path: wandb://run/simple.standard.2.18.24
    value_coef: 0
    action_coef: 0
  
#./train_dir/simple.standard.2.18.24

observations:
  obs_key: grid_obs
  track_last_action: ${env.track_last_action}
  
clip_range: 3.0
effective_rank_interval: 10
l2_init_weight_update_interval: 0

components:
#necessary source layers: _obs_, _core_
#necessary output layers: _action_param_, _value_
  _obs_: 
    _target_: agent.lib.obs_shaper.ObsShaper
    input_source: null

  obs_normalizer:
    _target_: agent.lib.observation_normalizer.ObservationNormalizer
    input_source: _obs_

  last_24_channels:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    sources:
      - source_name: obs_normalizer
        slice: [0, 28]  
        dim: 1          
    output_size: 24

  cnn1:
    _target_: agent.lib.nn_layer_library.Conv2d
    input_source: last_24_channels
    output_size: 64
    nn_params:
      kernel_size: 5
      stride: 3

  cnn2:
    _target_: agent.lib.nn_layer_library.Conv2d
    input_source: cnn1
    output_size: 64
    nn_params:
      kernel_size: 3
      stride: 1

  obs_flattener:
    _target_: agent.lib.nn_layer_library.Flatten
    input_source: cnn2

  fc1:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: obs_flattener
    output_size: 128

  encoded_obs:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: fc1
    output_size: 128

# ------------------------------------------------------------
  first_14_channels:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    sources:
      - source_name: obs_normalizer
        slice: [0, 28]  # extract the first 14 channels
        dim: 1          # operates on the channel dimension
    output_size: 28
  
  # Extract the center row (height = 11 → 1)
  center_row:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    sources:
      - source_name: first_14_channels
        slice: [5, 6]   # extract the center row (row index 5)
        dim: 2          # operates on the height dimension
    output_size: 1

  # Extract the center pixel from the center row (width = 11 → 1)
  center_pixel:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    sources:
      - source_name: center_row
        slice: [5, 6]   # extract the center column (column index 5)
        dim: 3          # operates on the width dimension
    output_size: 1

  # Flatten (batch, channels, 1, 1) -> (batch, channels)
  center_pixel_flatten:
    _target_: agent.lib.nn_layer_library.Flatten
    input_source: center_pixel

  # Process the center pixel vector (length = channels, usually 23) through a Linear layer
  center_linear:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: center_pixel_flatten
    output_size: 128

  self_info_encoded_obs_merger:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    sources:
      - source_name: center_linear
      - source_name: _encoded_obs_

# ------------------------------------------------------------

  _core_:
    _target_: agent.lib.lstm.LSTM
    input_source: self_info_encoded_obs_merger
    output_size: 128
    nn_params:
      num_layers: 2
      
  critic_1:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: _core_
    output_size: 1024
    nonlinearity: nn.Tanh

  _value_:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: critic_1
    output_size: 1
    nonlinearity: null

  actor_1:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: _core_
    output_size: 512

  _action_type_:
    _target_: agent.lib.action.ActionType
    input_source: actor_1
    nonlinearity: null

  _action_param_:
    _target_: agent.lib.action.ActionParam
    input_source: actor_1
    nonlinearity: null