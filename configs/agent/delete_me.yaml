# see reference_design.yaml for explanation of components
_target_: agent.metta_agent.MettaAgent

policy_selector:
  uri: null
  type: top
  range: 0
  metric: final.score
  generation: null

observations:
  obs_key: grid_obs
  track_last_action: false
  
clip_range: 0
effective_rank_interval: 10
l2_init_weight_update_interval: 0

components:
#necessary source layers: _obs_, _core_
#necessary output layers: _action_param_, _value_
  _obs_: 
    _target_: agent.lib.obs_shaper.ObsShaper
    input_source: null

  obs_normalizer:
    _target_: agent.lib.observation_normalizer.ObservationNormalizer
    input_source: _obs_
# change names etc.
  last_18_channels:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
# change this to input_sources:
    input_source:
      - source_name: obs_normalizer
        slice: [10, 28]  
        dim: 1          

# change names etc.
  cnn1:
    _target_: agent.lib.nn_layer_library.Conv2d
    input_source: last_18_channels
    nn_params:
      out_channels: 64
      kernel_size: 5
      stride: 3

  cnn2:
    _target_: agent.lib.nn_layer_library.Conv2d
    input_source: cnn1
    nn_params:
      out_channels: 64
      kernel_size: 3
      stride: 1

  obs_flattener:
    _target_: agent.lib.nn_layer_library.Flatten
    input_source: cnn2

  fc1:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: obs_flattener
    nn_params:
      out_features: 128

  encoded_obs:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: fc1
    nn_params:
      out_features: 128

# ------------------------------------------------------------
  # change names etc.
  first_14_channels:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    input_source:
      - source_name: obs_normalizer
        slice: [0, 28]  # extract the first 14 channels
        dim: 1          # operates on the channel dimension
  
  # Extract the center row (height = 11 → 1)
  center_row:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    input_source:
      - source_name: first_14_channels
        slice: [5, 6]   # extract the center row (row index 5)
        dim: 2          # operates on the height dimension

  # Extract the center pixel from the center row (width = 11 → 1)
  center_pixel:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    input_source:
      - source_name: center_row
        slice: [5, 6]   # extract the center column (column index 5)
        dim: 3          # operates on the width dimension

  # Flatten (batch, channels, 1, 1) -> (batch, channels)
  center_pixel_flatten:
    _target_: agent.lib.nn_layer_library.Flatten
    input_source: center_pixel

  center_linear:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: center_pixel_flatten
    nn_params:
      out_features: 128

  self_info_encoded_obs_merger:
    _target_: agent.lib.merge_layer.ConcatMergeLayer
    input_source:
      - source_name: center_linear
      - source_name: encoded_obs

# ------------------------------------------------------------

  _core_:
    _target_: agent.lib.lstm.LSTM
    input_source: self_info_encoded_obs_merger
    output_size: 128
    nn_params:
      num_layers: 2
      
  critic_1:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: _core_
    nn_params:
      out_features: 1024
    nonlinearity: nn.Tanh
    effective_rank: true

  _value_:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: critic_1
    nn_params:
      out_features: 1
    nonlinearity: null

  actor_1:
    _target_: agent.lib.nn_layer_library.Linear
    input_source: _core_
    nn_params:
      out_features: 512
    effective_rank: true

  embeds:
    _target_: agent.lib.action.ActionEmbedding
    input_source: null
    nn_params:
      num_embeddings: 50
      embedding_dim: 64

  embed_expanded:
    _target_: agent.lib.merge_layer.ExpandLayer
    expand_dim: null # never put a batch dim in the expand_dim since batch size changes
    # expand_value: 1 # only use this if there isn't a dims_source
    input_source: embeds # the tensor to expand
    dims_source: obs_shaper # null or the tensor to use to determine the size of the expanded dimension
    source_dim: 0

  embed_reshaped:
    _target_: agent.lib.merge_layer.ReshapeLayer # combines the two dims into the squeezed_dim
    squeezed_dim: 0
    popped_dim: 1
    input_source: embed_expanded

  actor_1_expanded:
    _target_: agent.lib.merge_layer.ExpandLayer
    expand_dim: 1
    input_dim: 0
    input_source: actor_1
    dims_source: embeds

  actor_1_reshaped:
    _target_: agent.lib.merge_layer.ReshapeLayer
    squeezed_dim: 0
    popped_dim: 1
    input_source: actor_1_expanded

  _action_:
    _target_: agent.lib.nn_layer_library.Bilinear
    input_source: 
      - actor_1_reshaped
      - embed_reshaped



  focus_expanded:
    _target_: agent.lib.merge_layer.ExpandLayer
    expand_dim: 1 # never put a batch dim in the expand_dim since batch size changes
    expand_value: null # only use this if there isn't a dims_source
    input_dim: 0
    input_source: focus # the tensor to expand
    dims_source: embeds # the tensor to use to determine the size of the expanded dimension

  focus_compressed:
    _target_: agent.lib.merge_layer.ReshapeLayer # combines the two dims into the squeezed_dim
    squeezed_dim: 0
    popped_dim: 1
    input_source: focus_expanded







